num_ways = {
    'A': {'A': '', '0': '<', '1': '^<<', '2': '^<', '3': '^', '4': '^^<<', '5': '^^<', '6': '^^', '7': '^^^<<', '8': '<^^^', '9': '^^^'},
    '0': {'A': '>', '0': '', '1': '^<', '2': '^', '3': '^>', '4': '^^<', '5': '^^', '6': '^^>', '7': '^^^<', '8': '^^^', '9': '^^^>'},
    '1': {'A': '>>v', '0': '>v', '1': '', '2': '>', '3': '>>', '4': '^', '5':'>^', '6': '>>^', '7': '^^', '8': '>^^', '9': '>>^^'},
    '2': {'A': '>v', '0': 'v', '1': '<', '2': '', '3': '>', '4': '^<', '5': '^', '6': '^>', '7': '^^<', '8': '^^', '9': '^^>'},
    '3': {'A': 'v', '0': 'v<', '1': '<<', '2': '<', '3': '', '4': '^<<', '5': '^<', '6': '^', '7': '<<^^', '8': '<^^', '9': '^^'},
    '4': {'A': '>>vv', '0': '>vv', '1': 'v', '2': '>v', '3': '>>v', '4': '', '5': '>', '6': '>>', '7': '^', '8': '^>', '9': '^>>'},
    '5': {'A': 'vv>', '0': 'vv', '1': 'v<', '2': 'v', '3': 'v>', '4': '<', '5': '', '6': '>', '7': '^<', '8': '^', '9': '^>'},
    '6': {'A': 'vv', '0': 'vv<', '1': 'v<<', '2': 'v<', '3': 'v', '4': '<<', '5': '<', '6': '', '7': '^<<', '8': '^<', '9': '^'},
    '7': {'A': '>>vvv', '0': '>vvv', '1': 'vv', '2': '>vv', '3': 'vv>>', '4': 'v', '5': '>v', '6': '>>v', '7': '', '8': '>', '9': '>>'},
    '8': {'A': 'vvv>', '0': 'vvv', '1': 'vv<', '2': 'vv', '3': 'vv>', '4': '<v', '5': 'v', '6': 'v>', '7': '<', '8': '', '9': '>'},
    '9': {'A': 'vvv', '0': 'vvv<', '1': 'vv<<', '2': 'vv<', '3': 'vv', '4': 'v<<', '5': 'v<', '6': 'v', '7': '<<', '8': '<', '9': ''},
}

dir_ways = {
    'A': {'A': '', '^': '<', '>': 'v', 'v': 'v<', '<': 'v<<'},
    '^': {'A': '>', '^': '', '>': 'v>', 'v': 'v', '<': 'v<'},
    '<': {'A': '>>^', '^': '>^', '>': '>>', 'v': '>', '<': ''},
    'v': {'A': '>^', '^': '^', '>': '>', 'v': '', '<': '<'},
    '>': {'A': '^', '^': '^<', '>': '', 'v': '<', '<': '<<'},
}

def parse(lines):
    nums = []
    for line in lines:
        if line:
            nums.append(line.strip())
    return nums

def dir_pad(pattern, depth):
    if depth == 0:
        return len(pattern)
    else:
        new_p = ''
        prev = 'A'
        for i in range(len(pattern)):
            new_p += dir_ways[prev][pattern[i]] + 'A'
            prev = pattern[i]
        return dir_pad(new_p, depth-1)

def num_pad(pattern, depth):
    new_p = ''
    prev = 'A'
    for i in range(len(pattern)):
        new_p += num_ways[prev][pattern[i]] + 'A'
        prev = pattern[i]
    return dir_pad(new_p, depth)

def one(nums):
    ans = 0
    for num in nums:
        ans += int(num[:-1]) * num_pad(num, 2)
    return ans

def two(nums):
    ans = 0
    for num in nums:
        ans += int(num[:-1]) * num_pad(num, 25)
    return ans

fin = open('d21_in.txt', 'r')
fout = open('d21_out.txt', 'w')

lines = fin.readlines()
nums = parse(lines)

fout.write(str(two(nums)))

fin.close()
fout.close()
